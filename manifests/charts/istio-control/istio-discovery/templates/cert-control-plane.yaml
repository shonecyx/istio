{{- if .Values.pilot.protegoCert }}
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cert-control-plane-{{ .Values.global.istioNamespace }}
rules:
- apiGroups: ["networking.istio.io"]
  resources: ["gateways", "gateways/status"]
  verbs: ["get", "list", "watch", "update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cert-control-plane-binding-{{ .Values.global.istioNamespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cert-control-plane-{{ .Values.global.istioNamespace }}
subjects:
- kind: ServiceAccount
  name: cert-control-plane
  namespace: {{ .Values.global.istioNamespace }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cert-control-plane
  namespace: {{ .Values.global.istioNamespace }}
spec:
  replicas: 2
  selector:
    matchLabels:
      app: protego-cert
  template:
    metadata:
      labels:
        app: protego-cert
      annotations:
        io.sherlock.logs/namespace: istio-system
        io.sherlock.metrics/hosts: ${data.host}:8080/metrics
        io.sherlock.metrics/module: prometheus
        io.sherlock.metrics/namespace: istio-system
        io.sherlock.metrics/period: 15s
        io.sherlock.metrics/timeout: 15s
        prometheus.io/path: /metrics
        prometheus.io/port: '8080'
        prometheus.io/scrape: 'true'
      name: protego-cert
    spec:
      securityContext:
        runAsUser: 1337
        runAsGroup: 1337
      containers:
      - name: protego-cert
        image: {{ .Values.pilot.certControlPlaneImage }}
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          protocol: TCP
        args:
        - -node-id=$(POD_NAME)
        - -port=8080
        - -istio-system=$(POD_NAMESPACE)
        resources:
          limits:
            cpu: 100m
            memory: 1Gi
          requests:
            cpu: 50m
            memory: 512Mi
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
      restartPolicy: Always
      serviceAccount: cert-control-plane
{{- if .Values.pilot.tolerations }}
      tolerations:
{{ toYaml .Values.pilot.tolerations | indent 6 }}
{{- end }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cert-control-plane
  namespace: {{ .Values.global.istioNamespace }}
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: {{ .Values.global.istioNamespace }}
  name: cert-control-plane-role
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["services"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods/portforward"]
  verbs: ["get", "list", "create"]
- apiGroups: ["coordination.k8s.io"]
  resources: ["leases"]
  verbs: ["*"]
- apiGroups: [""]
  resources: ["namespaces"]
  resourceNames: ["{{ .Values.global.istioNamespace }}"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cert-control-plane-role-binding
  namespace: {{ .Values.global.istioNamespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cert-control-plane-role
subjects:
- kind: ServiceAccount
  name: cert-control-plane
  namespace: {{ .Values.global.istioNamespace }}
{{- end }}